<Project Sdk="Microsoft.NET.Sdk">
    <PropertyGroup>
        <TargetFrameworks>net45;netstandard2.0;netstandard2.1</TargetFrameworks>
        <VersionPrefix>3.0.2</VersionPrefix>
        <VersionSuffix></VersionSuffix>
        <Product>FastExpressionCompiler</Product>
        <PackageId>$(Product)</PackageId>
        <Title>$(Product)</Title>
        <Description>FastExpressionCompiler is 10-40x times faster than Expression.Compile()</Description>
        <PackageTags>Performance;Expression;ExpressionTree;Compile;DynamicMethod;IL;ILEmit;DryIoc;ExpressionToCodeLib</PackageTags>
        <PackageReleaseNotes><![CDATA[
## v3.0.2 Bug-fix release

- fixed:  #300 Bad label content in ILGenerator in the Mapster benchmark with FEC V3
- fixed: Small issues with the `ToCSharpString()`, specifically in the TryCatch, and the Goto, and the Label expressions


## v3.0.1 Bug-fix release

fixed: #298 LightExpression with the NewExpression of 4 arguments has ArgumentCount = 3


## v3.0.0 - Major feature release

This version contains a lot of fixes and improvements and as-little-as-possible breaking changes.

### **FastExpressionCompiler** and **FastExpressionCompiler.LightExpression**

- Performance and memory consumption are improved, especially for the expressions with the closure and for expressions with the nested lambdas.
- More expression types are supported.
- Many fixes in the IL Emit.
- Added `ToCSharpString()` extension method to output the compile-able C# code described by the expression (tries hard).
- Added `ToExpressionString()` extension method to output the valid expression construction syntax, so given an expression object you'll get e.g. `Lambda(New(...))`.
- Added optional `enum CompilerFlags { Default, NoInvocationLambdaInlining, EnableDelegateDebugInfo}` parameter for the compilation 
- `EnableDelegateDebugInfo` adds the diagnostic info into the compiled delegate including its source Expression and C# code. Can be used as following: 
```cs
    var f = e.CompileFast(true, CompilerFlags.EnableDelegateDebugInfo);
    var di = f.Target as IDelegateDebugInfo;
    Assert.IsNotNull(di.Expression);
    Assert.IsNotNull(di.ExpressionString);
    Assert.IsNotNull(di.CSharpString);
```

### **FastExpressionCompiler.LightExpression**

- Now includes the `ExpressionVisitor`.
- Improves the compatibility (the drop-in replacement) between the `FastExpressionCompiler.LightExpression.Expression` and the `System.Linq.Expression`.
- Decreasing the memory consumed by the created expressions partially via implementing the `IArgumentProvider` and `IParameterProvider` for some expressions.


### The full list of the closed issues

[Milestone v3.0.0](https://github.com/dadhi/FastExpressionCompiler/milestone/19)

        ]]></PackageReleaseNotes>
        <AssemblyName>$(Product)</AssemblyName>
        <AssemblyTitle>$(Product) $(TargetFramework)</AssemblyTitle>
        <AssemblyVersion>$(VersionPrefix)</AssemblyVersion>
    </PropertyGroup>
    <ItemGroup Condition=" '$(TargetFramework)' == 'net45' ">
        <PackageReference Include="System.ValueTuple" Version="4.5.0"/>
    </ItemGroup>
    <ItemGroup Condition=" '$(TargetFramework)' == 'netstandard2.0' ">
        <PackageReference Include="System.Reflection.Emit.Lightweight" Version="4.7.0"/>
        <PackageReference Include="System.Dynamic.Runtime" Version="4.3.0"/>
    </ItemGroup>
</Project>
